#! /usr/bin/env python

# Author: Joseph Lisee <jlisee@gmail.com>

__doc__ = """Super simple configure replacement
"""

import argparse
import os
import sys

def main(argv = None):
    if argv is None:
        argv = sys.argv

    # Parse arguments
    parser = argparse.ArgumentParser(prog=argv[0])
    parser.add_argument('files', metavar='F', type=str, nargs='*',
                        default=['Makefile.pyt'], help='File to template')
    parser.add_argument('--prefix', dest='prefix', default='/usr/local',
                        help='directory to install into')
    parser.add_argument('--root', dest='root', default='',
                        help='The directory where the Makefile.pyt is')

    args = parser.parse_args(argv[1:])

    # Get path to file
    if len(args.root) == 0:
        cur_dir, _ = os.path.split(__file__)
    else:
        cur_dir = args.root

    for full_name in args.files:
        # Read in file and replace text
        full_path = os.path.join(cur_dir, full_name)
        contents = open(full_path).read()

        # Replace text
        output = contents.replace('${DESTDIR}', args.prefix)

        # Replace things based on environment variables
        env_vars = ['CFLAGS', 'CCFLAGS', 'CPPFLAGS', 'LDFLAGS']

        for env_var in env_vars:
            var_str = '${%s}' % env_var
            env_val = os.environ.get(env_var, None)
            if output.count(var_str) and env_val:
                output = output.replace(var_str, env_val)

        # Remove the extension from the file
        filename, _ = os.path.splitext(full_name)

        # Write out results
        with open(os.path.join(cur_dir, filename), 'w') as f:
            f.write(output)

if __name__ == '__main__':
    sys.exit(main())
